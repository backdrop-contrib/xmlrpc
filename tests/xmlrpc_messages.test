<?php

/**
 * @file
 * Definition of XmlRpcMessagesTest.
 */

/**
 * XML-RPC message and alteration tests.
 */
class XmlRpcMessagesTest extends BackdropWebTestCase {

  function setUp() {
    parent::setUp('xmlrpc', 'xmlrpc_test');
  }

  /**
   * Make sure that XML-RPC can transfer large messages.
   */
  function testSizedMessages() {
    // These tests can produce up to 128 x 160 words in the XML-RPC message
    // (see xmlrpc_test_message_sized_in_kb()) with 4 tags used to represent
    // each. Set a large enough tag limit to allow this to be tested.
    config_set('xmlrpc.settings', 'message_maximum_tag_count', 100000);

    $xml_url = url('xmlrpc.php', array('absolute' => TRUE));
    $sizes = array(8, 80, 160);
    foreach ($sizes as $size) {
      $xml_message_l = xmlrpc_test_message_sized_in_kb($size);
      $xml_message_r = xmlrpc($xml_url, array('messages.messageSizedInKB' => array($size)));

      $this->assertEqual($xml_message_l, $xml_message_r, t('XML-RPC messages.messageSizedInKB of %s Kb size received', array('%s' => $size)));
    }
  }

  /**
   * Ensure that hook_xmlrpc_alter() can hide even builtin methods.
   */
  protected function testAlterListMethods() {
    // Ensure xmlrpc_test_xmlrpc_alter() is disabled and retrieve regular list of methods.
    config_set('xmlrpc_test.settings', 'xmlrpc_alter', FALSE);
    $url = url('xmlrpc.php', array('absolute' => TRUE));
    $methods1 = xmlrpc($url, array('system.listMethods' => array()));

    // Enable the alter hook and retrieve the list of methods again.
    config_set('xmlrpc_test.settings', 'xmlrpc_alter', TRUE);
    $methods2 = xmlrpc($url, array('system.listMethods' => array()));

    $diff = array_diff($methods1, $methods2);
    $this->assertTrue(is_array($diff) && !empty($diff), t('Method list is altered by hook_xmlrpc_alter'));
    $removed = reset($diff);
    $this->assertEqual($removed, 'system.methodSignature', t('Hiding builtin system.methodSignature with hook_xmlrpc_alter works'));
  }

  /**
   * Test limits on system.multicall that can prevent brute-force attacks.
   */
  function testMulticallLimit() {
    $url = url(NULL, array('absolute' => TRUE)) . 'xmlrpc.php';
    $multicall_args = array();
    $num_method_calls = 10;
    for ($i = 0; $i < $num_method_calls; $i++) {
      $struct = array('i' => $i);
      $multicall_args[] = array('methodName' => 'validator1.echoStructTest', 'params' => array($struct));
    }
    // Test limits of 1, 5, 9, 13.
    for ($limit = 1; $limit < $num_method_calls + 4; $limit += 4) {
      config_set('xmlrpc.settings', 'multicall_duplicate_method_limit', $limit);
      $results = xmlrpc($url, array('system.multicall' => array($multicall_args)));
      $this->assertEqual($num_method_calls, count($results));
      for ($i = 0; $i < min($limit, $num_method_calls); $i++) {
        $x = array_shift($results);
        $this->assertTrue(empty($x->is_error), "Result $i is not an error");
        $this->assertEqual($multicall_args[$i]['params'][0], $x);
      }
      for (; $i < $num_method_calls; $i++) {
        $x = array_shift($results);
        $this->assertFalse(empty($x->is_error), "Result $i is an error");
        $this->assertEqual(-156579, $x->code);
      }
    }
    config_set('xmlrpc.settings', 'multicall_duplicate_method_limit', -1);
    $results = xmlrpc($url, array('system.multicall' => array($multicall_args)));
    $this->assertEqual($num_method_calls, count($results));
    foreach ($results as $i => $x) {
      $this->assertTrue(empty($x->is_error), "Result $i is not an error");
    }
  }
}
